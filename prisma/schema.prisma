datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// --------------------------------------------------------------------------------------------------------------------------------//
// AUTHENTICATION //

enum UserRole {
  STUDENT
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  studentId     String?   @unique
  phone         String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STUDENT)
  major         String?
  year          Int?

  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?

  accounts Account[]

  services         Service[]
  serviceReviews   ServiceReview[]
  servicesUsed     BookedServices[]      @relation("ServicesUsed")
  driver           Driver?
  ridesOffered     Ride[]             @relation("DriverRides")
  ridesRequested   Ride[]             @relation("PassengerRides")
  studyGroups      StudyGroupMember[]
  assignments      Assignment[]
  assignmentsVoted AssignmentVote[]
  eventsCreated    Event[]            @relation("CreatorEvents")
  eventsAttended   EventAttendee[]
  paymentsMade     Payment[]          @relation("PayerPayments")
  paymentsReceived Payment[]          @relation("ReceiverPayments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId])
}

// ------------------------------------------------------------------------------------------------------------------------------- //
// SERVICES //

model Service {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  images      String[]
  description String
  price       Float
  category    String[]

  provider  User            @relation(fields: [providerId], references: [id])
  reviews   ServiceReview[]
  customers BookedServices[]   @relation("Customers")
}

model BookedServices {
  id        String  @id @default(uuid())
  serviceId String
  buyerId   String
  dateTime DateTime @default(now())
  status String @default("pending")
  isPaid    Boolean @default(false)
  isCompleted Boolean @default(false)
  paidSeller Boolean @default(false)
  updatedAt DateTime @updatedAt

  paymentId String?

  buyer   User     @relation("ServicesUsed", fields: [buyerId], references: [id])
  service Service  @relation("Customers", fields: [serviceId], references: [id])
  reciept Payment? @relation("ServiceReceipts", fields: [paymentId], references: [id])
}

model ServiceReview {
  id         String   @id @default(cuid())
  serviceId  String
  reviewerId String
  rating     Int
  comment    String
  reviewDate DateTime @default(now())

  service  Service @relation(fields: [serviceId], references: [id])
  reviewer User    @relation(fields: [reviewerId], references: [id])
}

model Driver {
  id            String @id @default(cuid())
  userId        String @unique
  licenseNumber String
  carModel      String
  carColor      String
  carCapacity   Int

  user User @relation(fields: [userId], references: [id])
}

model Ride {
  id            String   @id @default(cuid())
  driverId      String
  passengerId   String
  dateTime      DateTime
  startLocation String
  endLocation   String
  status        String
  isPaid        Boolean  @default(false)
  paymentId     String?

  driver    User     @relation("DriverRides", fields: [driverId], references: [id])
  passenger User     @relation("PassengerRides", fields: [passengerId], references: [id])
  reciept   Payment? @relation("RideReceipts", fields: [paymentId], references: [id])
}



// -------------------------------------------------------------------------------------------------------------------------------------------- //
// STUDY GROUPS //

model Course {
  id    String @id @default(uuid())
  title String
  code  String @unique

  assignments Assignment[]
  studyGroups StudyGroup[]
}

model StudyGroup {
  id         String @id @default(cuid())
  name       String
  courseId   String

  course     Course             @relation(fields: [courseId], references: [id])
  members    StudyGroupMember[]
}

model StudyGroupMember {
  id           String @id @default(cuid())
  userId       String
  studyGroupId String
  isAdmin Boolean @default(false)
  joinRequestAccepted Boolean @default(false)

  user       User       @relation(fields: [userId], references: [id])
  studyGroup StudyGroup @relation(fields: [studyGroupId], references: [id])

  @@unique([userId, studyGroupId])
}

model Assignment {
  id          String   @id @default(cuid())
  courseId    String
  uploaderId  String
  title       String
  description String
  filePath    String
  uploadDate  DateTime @default(now())

  course   Course @relation(fields: [courseId], references: [id])
  uploader User   @relation(fields: [uploaderId], references: [id])
  votes    AssignmentVote[]
}

model AssignmentVote {
  id           String  @id @default(cuid())
  assignmentId String
  userId       String
  value        Int     // 1 for upvote, -1 for downvote

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@unique([assignmentId, userId])
}

// model Chat {
//   id            String @id @default(cuid())
//   name          String
//   studyGroupId  String?

//   studyGroup   StudyGroup?       @relation(fields: [studyGroupId], references: [id])
//   participants ChatParticipant[]
//   messages     Message[]
// }

// model ChatParticipant {
//   id     String @id @default(cuid())
//   userId String
//   chatId String

//   user User @relation(fields: [userId], references: [id])
//   chat Chat @relation(fields: [chatId], references: [id])

//   @@unique([userId, chatId])
// }

// model Message {
//   id       String   @id @default(cuid())
//   chatId   String
//   senderId String
//   content  String
//   files String[]
//   sendTime DateTime @default(now())

//   chat   Chat @relation(fields: [chatId], references: [id])
//   sender User @relation(fields: [senderId], references: [id])
// }


// ------------------------------------------------------------------------------------------------------------------------ //
// EVENTS

model Event {
  id          String   @id @default(cuid())
  creatorId   String
  title       String
  description String
  type        String
  images      String[]
  dateTime    DateTime
  location    String

  creator   User            @relation("CreatorEvents", fields: [creatorId], references: [id])
  attendees EventAttendee[]
}

model EventAttendee {
  id      String @id @default(cuid())
  userId  String
  eventId String

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}



// ------------------------------------------------------------------------------------------------------------------------ //
// PAYMENTS & NOTIFICATIONS//

// model Notification {
//   id        String   @id @default(cuid())
//   userId    String
//   content   String
//   type      String
//   timestamp DateTime @default(now())
//   isRead    Boolean  @default(false)

//   user User @relation(fields: [userId], references: [id])
// }

model Payment {
  id          String   @id @default(cuid())
  payerId     String
  receiverId  String
  amount      Float
  paymentType String
  paymentDate DateTime @default(now())
  status      String

  payer    User @relation("PayerPayments", fields: [payerId], references: [id])
  receiver User @relation("ReceiverPayments", fields: [receiverId], references: [id])

  ServiceReceipts BookedServices[] @relation("ServiceReceipts")
  RidesReceipts   Ride[]        @relation("RideReceipts")
}
