datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// --------------------------------------------------------------------------------------------------------------------------------//
// AUTHENTICATION //

enum UserRole {
  STUDENT
  SELLER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  studentId     String?   @unique
  bio           String?
  phone         String?
  email         String    @unique
  
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STUDENT)
  isOnboarded   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?

  accounts Account[]

  services          Service[]
  favouriteServices FavoriteService[]
  serviceReviews    ServiceReview[]
  bookedServices    ServiceBooking[]
  subscription      Subscription?

  products          Product[]
  favouriteProducts FavouriteProduct[]
  productsRequests  ProductRequest[]
  productReviews    ProductReview[]
  carts             Cart[]

  driver           Driver?
  ridesRequested   Ride[]
  studyGroups      StudyGroupMember[]
  assignments      Assignment[]
  assignmentsVoted AssignmentVote[]
  eventsCreated    Event[]
  eventsAttended   EventAttendee[]

  paymentsMade     Payment[] @relation("PaymentsMade")
  paymentsReceived Payment[] @relation("PaymentsReceived")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId])
}

// ------------------------------------------------------------------------------------------------------------------------------- //
// SERVICES //

model Service {
  id              String   @id @default(cuid())
  providerId      String
  name            String
  images          String[]
  price           Float
  defaultLocation String?
  isMobileService Boolean  @default(false)
  category        String[]
  availability    Json
  portfolio       String[] @default([])
  isAvailable     Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt @default(now())

  provider User              @relation(fields: [providerId], references: [id])
  offers   ServiceOffer[]
  reviews  ServiceReview[]
  likes    FavoriteService[]
}

model FavoriteService {
  id        String @id @default(cuid())
  userId    String
  serviceId String

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model ServiceOffer {
  id        String @id @default(cuid())
  serviceId String
  title     String
  duration  Int?
  price     Float

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  bookings ServiceBooking[]
}

model ServiceBooking {
  id         String        @id @default(cuid())
  offerId    String
  customerId String
  paymentId  String?
  date       DateTime
  time       Json?
  status     BookingStatus
  location   String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  offer    ServiceOffer @relation(fields: [offerId], references: [id])
  customer User         @relation(fields: [customerId], references: [id])
  payment  Payment?     @relation(fields: [paymentId], references: [id])
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model ServiceReview {
  id            String   @id @default(cuid())
  serviceId     String
  reviewerId    String
  comment       String
  cleanliness   Int?
  accuracy      Int?
  checkIn       Int?
  communication Int?
  location      Int?
  value         Int?
  reviewDate    DateTime @default(now())

  service  Service @relation(fields: [serviceId], references: [id])
  reviewer User    @relation(fields: [reviewerId], references: [id])
}

model Subscription {
  id            String             @id @default(cuid())
  userId        String             @unique
  user          User               @relation(fields: [userId], references: [id])
  status        SubscriptionStatus
  paymentMethod PaymentMethod
  plan          SubscriptionPlan   @default(STANDARD)
  monthlyAmount Float              @default(30)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum PaymentMethod {
  VENMO
  PAYPAL
  STRIPE
}

enum SubscriptionPlan {
  STANDARD
  PRO
  PREMIUM
}

// -----------------------------------------------------------------------------------------------------------------------------------------------------------//
// Rides Features

model Driver {
  id            String @id @default(cuid())
  userId        String @unique
  licenseNumber String
  carModel      String
  carColor      String
  carCapacity   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())

  user User @relation(fields: [userId], references: [id])

  rides Ride[]
}

model Ride {
  id            String   @id @default(cuid())
  driverId      String
  passengerId   String
  dateTime      DateTime
  startLocation String
  endLocation   String
  status        String
  isPaid        Boolean  @default(false)
  paymentId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())

  driver    Driver   @relation(fields: [driverId], references: [id])
  passenger User     @relation(fields: [passengerId], references: [id])
  reciept   Payment? @relation(fields: [paymentId], references: [id])
}

// ------------------------------------------------------------------------------------------------------------------------------- //
// PRODUCTS MARKETPLACE //

model Product {
  id                      String       @id @default(cuid())
  name                    String
  description             String
  price                   Float
  discount                Int          @default(0)
  stock                   Int
  images                  String[]
  categories              String[]
  brand                   String       @default("Generic")
  state                   ProductState @default(NEW)
  isAvailable             Boolean      @default(true)
  delivery                Boolean      @default(true)
  defaultDeliveryLocation String?
  averageDeliveryTime     Int?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt

  // Relations
  seller          User               @relation(fields: [sellerId], references: [id])
  sellerId        String
  cartItems       CartItem[]
  productRequests ProductRequest[]
  favourites      FavouriteProduct[]
  reviews         ProductReview[]

  @@index([sellerId])
}

enum ProductState {
  NEW
  USED
  REFURBISHED
  DAMAGED
}

model FavouriteProduct {
  id        String @id @default(cuid())
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model ProductReview {
  id            String   @id @default(cuid())
  productId     String
  reviewerId    String
  comment       String?
  meetUp        Int?
  location      Int?
  experience    Int?
  communication Int?
  packaging     Int?
  value         Int?
  reviewDate    DateTime @default(now())

  product  Product @relation(fields: [productId], references: [id])
  reviewer User    @relation(fields: [reviewerId], references: [id])
}

model ProductRequest {
  id               String   @id @default(cuid())
  price            Float
  quantity         Int
  isAccepted       Boolean  @default(false)
  isDenied         Boolean  @default(false)
  deliveryTime     DateTime @default(dbgenerated("NOW() + INTERVAL '1 week'"))
  deliveryLocation String?
  createdAt        DateTime @default(now())

  // Relations
  product    Product @relation(fields: [productId], references: [id])
  productId  String
  customer   User    @relation(fields: [customerId], references: [id])
  customerId String

  @@index([productId])
  @@index([customerId])
}

model Cart {
  id               String   @id @default(cuid())
  totalPrice       Float    @default(0)
  isOrdered        Boolean  @default(false)
  isPaid           Boolean  @default(false)
  deliveryLocation String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  customer   User       @relation(fields: [customerId], references: [id])
  customerId String
  payment    Payment?   @relation(fields: [paymentId], references: [id])
  paymentId  String?
  cartItems  CartItem[]

  @@index([customerId])
}

model CartItem {
  id           String   @id @default(cuid())
  price        Float
  quantity     Int
  wasRequested Boolean  @default(false)
  isDelivered  Boolean  @default(false)
  deliveryDate DateTime @default(dbgenerated("NOW() + INTERVAL '1 week'"))

  isRefunded Boolean  @default(false)
  isCanceled Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([cartId])
  @@index([productId])
}

// -------------------------------------------------------------------------------------------------------------------------------------------- //
// STUDY GROUPS //

model Course {
  id    String @id @default(uuid())
  title String
  code  String @unique

  assignments Assignment[]
  studyGroups StudyGroup[]
}

model StudyGroup {
  id       String @id @default(cuid())
  name     String
  courseId String

  course  Course             @relation(fields: [courseId], references: [id])
  members StudyGroupMember[]
}

model StudyGroupMember {
  id                  String  @id @default(cuid())
  userId              String
  studyGroupId        String
  isAdmin             Boolean @default(false)
  joinRequestAccepted Boolean @default(false)

  user       User       @relation(fields: [userId], references: [id])
  studyGroup StudyGroup @relation(fields: [studyGroupId], references: [id])

  @@unique([userId, studyGroupId])
}

model Assignment {
  id          String   @id @default(cuid())
  courseId    String
  uploaderId  String
  title       String
  description String
  filePath    String
  uploadDate  DateTime @default(now())

  course   Course           @relation(fields: [courseId], references: [id])
  uploader User             @relation(fields: [uploaderId], references: [id])
  votes    AssignmentVote[]
}

model AssignmentVote {
  id           String @id @default(cuid())
  assignmentId String
  userId       String
  value        Int // 1 for upvote, -1 for downvote

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@unique([assignmentId, userId])
}

// ------------------------------------------------------------------------------------------------------------------------ //
// EVENTS

model Event {
  id          String   @id @default(cuid())
  creatorId   String
  title       String
  description String
  type        String
  images      String[]
  dateTime    DateTime
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  creator   User            @relation(fields: [creatorId], references: [id])
  attendees EventAttendee[]
}

model EventAttendee {
  id      String @id @default(cuid())
  userId  String
  eventId String

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

// ------------------------------------------------------------------------------------------------------------------------ //
// PAYMENTS //

model Payment {
  id          String   @id @default(cuid())
  payerId     String
  receiverId  String
  amount      Float
  paymentType String
  paymentDate DateTime @default(now())
  status      String

  payer    User @relation("PaymentsMade", fields: [payerId], references: [id])
  receiver User @relation("PaymentsReceived", fields: [receiverId], references: [id])

  ServiceReceipts   ServiceBooking[]
  RidesReceipts     Ride[]
  ProdcuctsReceipts Cart[]
}
